<script server>

  const Ajv = require("ajv");
  const ajv = new Ajv({ allErrors: true });
  const addFormats = require("ajv-formats")
  addFormats(ajv)
  require("ajv-errors")(ajv);

  const {
    validateFormWithSchema,
    handlePocketbaseError
  } = resolve('form-helpers');

  // ajv schema for login
  const loginSchema = {
    type: 'object',
    required: ['identity', 'password'],
    properties: {
      identity: {
        type: 'string',
        format: 'email',
      },
      password: { 
        type: 'string', 
        minLength: 8,
        maxLength: 71,
      },
    },
    errorMessage: {
      type: 'Invalid data type',
      required: {
        identity: 'Email is required',
        password: 'Password is required'
      },
      properties: {
        identity: 'Invalid email address',
        password: 'Password is invalid'
      }
    },
    additionalProperties: false
  };

  let serverError = null
  let fieldErrors = {}
  let parsedFormData = {}

  if (request.method === 'POST') {

    parsedFormData = formData();

    echo(parsedFormData)

    const validation = validateFormWithSchema(parsedFormData, loginSchema, ajv, dbg);
    if (!validation.valid) {
      fieldErrors = validation.fieldErrors;
      serverError = validation.serverError;
    } else {
      try {
        const authData = pb()
          .collection('users')
          .authWithPassword(parsedFormData.identity, parsedFormData.password);
        if (authData.record.verified) {
          api.signIn(authData)
          redirect(`/`)
        } else {
          serverError = 'Please verify your email address before logging in.'
        }
      } catch (e) {
        const handled = handlePocketbaseError(e);
        fieldErrors = handled.fieldErrors;
        serverError = handled.serverError;
      }
    }
  }
</script>

  <form method="post" action="/auth/login" class="p-6 max-w-sm mx-auto">
    <fieldset class="fieldset bg-base-200 border-base-300 rounded-box w-xs border p-4">      

      <%- include('server-error', { serverError }) %>

      <legend class="fieldset-legend">Login</legend>

      <label class="label">Email</label>
      <input 
        name="identity" 
        value="<%= parsedFormData.identity %>" 
        type="email"
        class="validator input<%= fieldErrors && fieldErrors.identity ? ' input-error' : '' %>" 
        placeholder="Email"
        required="required" />
      <%- include('field-error', { fieldName: "identity", fieldErrors }) %>
      <div class="validator-hint">Enter valid email address</div>

      <label class="label">Password</label>
      <input 
        name="password" 
        type="password" 
        class="validator input<%= fieldErrors && fieldErrors.password ? ' input-error' : '' %>" 
        placeholder="Password"
        minlength="8"
        maxlength="71"
        required="required"/>
      <%- include('field-error', { fieldName: "password", fieldErrors }) %>
      <div class="validator-hint">Enter valid password</div>

      <button type="submit" class="btn btn-neutral mt-4">Login</button>
      <div class="text-center mt-2">
        <a href="/auth/forgot" class="link link-primary">Forgot Password?</a>
      </div>
    </fieldset>
  </form>